/**
 * @fileoverview gRPC-Web generated client stub for ping
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v3.12.4
// source: ping.proto

/* eslint-disable */
// @ts-nocheck

import grpcWeb from 'grpc-web';
import * as protoPing from './ping_pb.js';

const grpc = { web: grpcWeb };
const proto = { ping: protoPing };

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
export class PingServiceClient {
  constructor(hostname, credentials, options) {
    if (!options) options = {};
    options.format = 'text';

    /** @private @const {!grpc.web.GrpcWebClientBase} The client */
    this.client_ = new grpc.web.GrpcWebClientBase(options);

    /** @private @const {string} The hostname */
    this.hostname_ = hostname.replace(/\/+$/, '');
  }

  /**
   * @param {!proto.ping.PingRequest} request The request proto
   * @param {?Object<string, string>} metadata User defined call metadata
   * @param {function(?grpc.web.RpcError, ?proto.ping.PingResponse)} callback
   *     The callback function(error, response)
   * @return {!grpc.web.ClientReadableStream<!proto.ping.PingResponse>|undefined}
   *     The XHR Node Readable Stream
   */
  ping(request, metadata, callback) {
    return this.client_.rpcCall(
      this.hostname_ + '/ping.PingService/Ping',
      request,
      metadata || {},
      methodDescriptor_PingService_Ping,
      callback
    );
  }
}

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
export class PingServicePromiseClient {
  constructor(hostname, credentials, options) {
    if (!options) options = {};
    options.format = 'text';

    /** @private @const {!grpc.web.GrpcWebClientBase} The client */
    this.client_ = new grpc.web.GrpcWebClientBase(options);

    /** @private @const {string} The hostname */
    this.hostname_ = hostname.replace(/\/+$/, '');
  }

  /**
   * @param {!proto.ping.PingRequest} request The request proto
   * @param {?Object<string, string>=} metadata User defined call metadata
   * @return {!Promise<!proto.ping.PingResponse>}
   *     Promise that resolves to the response
   */
  ping(request, metadata) {
    return this.client_.unaryCall(
      this.hostname_ + '/ping.PingService/Ping',
      request,
      metadata || {},
      methodDescriptor_PingService_Ping
    );
  }
}

/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ping.PingRequest,
 *   !proto.ping.PingResponse>}
 */
const methodDescriptor_PingService_Ping = new grpc.web.MethodDescriptor(
  '/ping.PingService/Ping',
  grpc.web.MethodType.UNARY,
  proto.ping.PingRequest,
  proto.ping.PingResponse,
  /** @param {!proto.ping.PingRequest} request @return {!Uint8Array} */
  (request) => request.serializeBinary(),
  proto.ping.PingResponse.deserializeBinary
);
